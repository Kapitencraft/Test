program     -> declaration* EOF

declaration -> classDecl | funcDecl | varDecl | statement
classDecl   -> "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}"
funDecl     -> "def" function
varDecl     -> "var" IDENTIFIER ( "=" expression )? ";"

statement   -> exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block
exprStmt    -> expression ";"
forStmt     -> "for" "(" ( varDecl | exprStmt)? ";" expression? ";" expression? ")" statement
ifStmt      -> "if" "(" expression ")" statement
returnStmt  -> "return" expression? ";"
whileStmt   -> "while" "(" expression ")" statement
block       -> "{" declaration* "}"

expression  -> assignment;

assignment  -> ( call "." )? IDENTIFIER "=" assignment | logic_or

logic_or    -> logic_and ( "or" logic_and )*
logic_and   -> equality ( "and" equality )*
equality    -> comparison ( ( "!=" | "==" ) comparison )*
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )*
term        -> factor ( ( "-" | "+" ) factor )*
factor      -> unary ( ( "/" | "*" ) unary )*

unary       -> ( "!" | "-" ) unary | call
call        -> primary ( "(" arguments? ")" | "." IDENTIFIER )*
primary     -> "true" | "false" | "null" | "this" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "super"

//util
function       → IDENTIFIER "(" parameters? ")" block
parameters     → IDENTIFIER ( "," IDENTIFIER )*
arguments      → expression ( "," expression )*

//lexical
NUMBER         → DIGIT+ ( "." DIGIT+ )?
STRING         → "\"" <any char except "\"">* "\""
IDENTIFIER     → ALPHA ( ALPHA | DIGIT )*
ALPHA          → [a-zA-Z_]
DIGIT          → [0-9]
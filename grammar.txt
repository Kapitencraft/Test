program     -> pck import* classDecl

pck         -> "package" VAR_TYPE ";"
import      -> "import" VAR_TYPE ("as" IDENTIFIER)? ";"

interfaceDecl -> "interface" IDENTIFIER ( "extends" IDENTIFIER ( "," IDENTIFIER )* )?
classDecl   -> "class" IDENTIFIER ( "extends" IDENTIFIER )? "{" (funcDecl | varDecl)* "}"
enumDecl -> "enum" ( "implements" IDENTIFIER ( "," IDENTIFIER )*

declaration -> varDecl | statement

funcDecl    -> VAR_TYPE IDENTIFIER "(" parameters? ")" block
fieldDecl   -> "static"? varDecl;
varDecl     -> "final"? VAR_TYPE IDENTIFIER ( "=" expression )? ";"

statement   -> exprStmt | forStmt | ifStmt | tryStmt | thrStmt | returnStmt | whileStmt | block
exprStmt    -> switch | call | assignment ";"
forStmt     -> "for" "(" ( varDecl | exprStmt)? ";" expression? ";" expression? ")" statement
ifStmt      -> "if" "(" expression ")" statement ( "elif" "(" expression ")" statement )* ( "else" statement )?
tryStmt     -> "try" "{" statement* "}" ( ( "catch" "(" VAR_TYPE ( "|" VAR_TYPE )* IDENTIFIER ")" "{" statement* "}" ) | ("finally" "{" statement* "}"
thrStmt     -> "throw" expression ";"
returnStmt  -> "return" expression? ";"
whileStmt   -> "while" "(" expression ")" statement
block       -> "{" statement* "}"

expression  -> switch | when;

switch      -> "switch" "(" expression ")" "{" ( "case" primary "->" expression ";")* ("default" "->" expression ";")? "}"

when        -> cast_check ( "?" expression ":" expression)?

cast_check  -> assignment ( "instanceof" VAR_TYPE IDENTIFIER? )?

assignment  -> ( call "." )? IDENTIFIER "=" assignment | logic_or

logic_or    -> logic_and ( ("or" | "||") logic_and )*
logic_and   -> equality ( ("and" | "&&") equality )*
equality    -> comparison ( ( "!=" | "==" ) comparison )*
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )*
term        -> factor ( ( "-" | "+" ) factor )*
factor      -> unary ( ( "/" | "*" ) unary )*

unary       -> ( "!" | "-" ) unary | call | switch | constructor

call        -> primary ( "(" arguments? ")" | "." IDENTIFIER )*
constructor -> "new" VAR_TYPE "(" arguments? ")"

primary     -> "true" | "false" | "null" | "this" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "super" "." IDENTIFIER

//util
parameters  -> VAR_TYPE IDENTIFIER ( "," IDENTIFIER )*
arguments   -> expression ( "," expression )*
genericType -> IDENTIFIER (("extends" IDENTIFIER) | ("super" IDENTIFIER))?
generics    -> "<" genericType ("," genericType)* ">"
genericDecl -> "<" IDENTIFIER ("," IDENTIFIER)* ">"

//lexical
NUMBER      -> DIGIT+ ( "." DIGIT+ )?
STRING      -> "\"" <any char except "\"">* "\""
IDENTIFIER  -> ALPHA ( ALPHA | DIGIT )*
ALPHA       -> [a-zA-Z_]
DIGIT       -> [0-9]
VAR_TYPE    -> IDENTIFIER ("." IDENTIFIER)*